Global functions and key bindings
** Custom inits
Put it here to remove warning about prefix keys.
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "M-ESC ESC"))
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "M-c"))
#+END_SRC

** Custom Functions
#+BEGIN_SRC emacs-lisp
  (defun zarkone/reload-dir-locals-for-current-buffer ()
    "reload dir locals for the current buffer"
    (interactive)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))

  (defun nxml-where ()
    "Display the hierarchy of XML elements the point is on as a path."
    (interactive)
    (let ((path nil))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (< (point-min) (point)) ;; Doesn't error if point is at beginning of buffer
                      (condition-case nil
                          (progn
                            (nxml-backward-up-element) ; always returns nil
                            t)
                        (error nil)))
            (setq path (cons (xmltok-start-tag-local-name) path)))
          (if (called-interactively-p t)
              (message "/%s" (mapconcat 'identity path "/"))
            (format "/%s" (mapconcat 'identity path "/")))))))

  (defun maybe-suspend-frame ()
    "In a GUI environment, do nothing; otherwise `suspend-frame'."
    (interactive)
    (if (display-graphic-p)
        (message "suspend-frame disabled for graphical displays.")
      (suspend-frame)))

  (defun font-names-list ()
    "Get list of names of installed fonts,which can be used to set font."
    (seq-filter (lambda (font)
                  (when-let ((info (font-info font)))
                    (string-match-p "spacing=100" (aref info 1))))
                (font-family-list)))

  (defun zarkone/prev-window ()
    "Other-window, backward"
    (interactive)
    (other-window -1))

  (defun zarkone/insert-current-date ()
    "Insert current date here."
    (interactive)
    (insert
     (shell-command-to-string "date")))

  (defun vertical-three-windows-layout ()
    "Vertical, three window layout"
    (interactive)
    (delete-other-windows)
    (split-window-horizontally)
    (split-window-horizontally)
    (balance-windows))

  (defun run-static-server (&optional on-random-port)
    "Run static server in current dir, with default port (8000).
      With prefix arg, run at random free port"
    (interactive "P")
    (let ((shell-command "python -m SimpleHTTPServer"))
      (async-shell-command
       (concat shell-command
               (when on-random-port
                 " 0")))))

  (defun emacs-reload ()
    "reloads emacs config"
    (interactive)
    (org-babel-load-file (expand-file-name "literally.org" user-emacs-directory)))

  (defun zarkone/comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)
      (next-line)))

  (defun zarkone/switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (defun zarkone/kill-region-or-backward-kill-word (&optional arg region)
    "`kill-region' if the region is active, otherwise `backward-kill-word'"
    (interactive
     (list (prefix-numeric-value current-prefix-arg) (use-region-p)))
    (if region
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))

  (defun zarkone/filename-to-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (with-temp-buffer
          (insert filename)
          (clipboard-kill-region (point-min) (point-max)))
        (message filename))))

  (defun zarkone/duplicate-line ()
    "Duplicate current line."
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))

  (defun zarkone/delete-whitespace (&optional backward-only)
    "Delete all spaces, tabs and newlinesaround point.
      If BACKWARD-ONLY is non-nil, only delete them before point."
    (interactive "*P")
    (let ((orig-pos (point)))
      (delete-region
       (if backward-only
           orig-pos
         (progn
           (skip-chars-forward " \t\n")
           (constrain-to-field nil orig-pos t)))
       (progn
         (skip-chars-backward " \t\n")
         (constrain-to-field nil orig-pos)))))

  (defun bf-pretty-print-xml-region (begin end)
    "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
    (interactive "r")
    (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end)))

  (defun zarkone/pretty-print-xml-buffer ()
    (interactive)
    (bf-pretty-print-xml-region (point-min) (point-max)))

  (defun wl-paste-running ()
    (and wl-copy-process
         (process-live-p wl-copy-process)))

  (defun is-wayland-session ()
    (string= (getenv "XDG_SESSION_TYPE")
             "wayland"))

  (defun wl-clipboard-init ()
    (when (is-wayland-session)
      (setq wl-copy-process nil)
      (setq interprogram-cut-function 'wl-copy)
      (setq interprogram-paste-function 'wl-paste)))

  (defun wl-copy (text)
    (setq wl-copy-process (make-process :name "wl-copy"
                                        :buffer nil
                                        :command '("wl-copy" "-f" "-n")
                                        :connection-type 'pipe))
    (process-send-string wl-copy-process text)
    (process-send-eof wl-copy-process))

  (defun wl-paste ()
    (when (not (wl-paste-running))
      (let ((content-raw (shell-command-to-string "wl-paste -n")))
        (replace-regexp-in-string "\s+$" "" content-raw))))
#+END_SRC

** Custom KBD Macro
Removed all macroses to functions ATM; decided to leave =defkbdmacro= here for
future reference.
#+BEGIN_SRC emacs-lisp
  (defmacro defkbdmacro (name keyseq-string &optional docstring)
    `(fset (quote ,name)
           (lambda (&optional arg)
             ,docstring
             (interactive "p")
             (kmacro-exec-ring-item (quote (,keyseq-string 0 "%d")) arg))))
#+END_SRC
** Global vars, hooks and key bindings
#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :demand t
    :config (key-chord-mode 1))

  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...


  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...

  (use-package orderless
    :init
    ;; Tune the global completion style settings to your liking!
    ;; This affects the minibuffer and non-lsp completion at point.
    (setq completion-styles '(orderless partial-completion basic)
          completion-category-defaults nil
          completion-category-overrides '((eglot (styles orderless)))))

  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-z C-p" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-z C-b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-z C-t" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-c M-d" . consult-find)
           ("M-c D" . consult-locate)
           ("M-c g" . consult-grep)
           ("M-c G" . consult-git-grep)
           ("M-c M-c" . consult-ripgrep)
           ("M-c l" . consult-line)
           ("M-c L" . consult-line-multi)
           ("M-c k" . consult-keep-lines)
           ("M-c u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key (kbd "M-.")
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
      ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
      ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
      ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
      ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )


  (use-package embark
    :ensure t

    :bind
    (("C-`" . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+END_SRC
* Appearance
** COMMENT OSX
   #+begin_src emacs-lisp
     (use-package osx-pseudo-daemon
       :custom
       (osx-pseudo-daemon-mode 1)
       (mac-option-modifier 'super)
       (mac-command-modifier 'meta))

     (use-package exec-path-from-shell
       :init
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize)))
   #+end_src
** Disable all GUI
#+BEGIN_SRC emacs-lisp
  (when window-system
    (menu-bar-mode 0)
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (tooltip-mode 0))

  (global-hl-line-mode 1)
  (blink-cursor-mode 1)

  (setq ring-bell-function 'ignore)
  (setq-default indicate-buffer-boundaries 'left)
  (use-package diminish)
#+END_SRC
** Set window title in TERM
   #+begin_src emacs-lisp
     (setq-default frame-title-format '("Emacs: %b"))
     (load "~/.emacs.d/term-title.el")
     (require 'term-title)
     (term-title-mode)
   #+end_src
** Highlight git changes in fringes
   #+begin_src emacs-lisp
     (use-package diff-hl
       :hook (after-init . global-diff-hl-mode))
   #+end_src

** COMMENT Ligatures
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/ligature.el/ligature.el")

  (use-package ligature
    :ensure nil
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
** Color Theme
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (load-theme 'modus-vivendi t)
  (set-face-attribute 'default nil :background "#112")


#+END_SRC
* Packages
** nix
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :hook (nix-mode . eglot-ensure)
    :ensure t)

#+END_SRC

** browse-at-remote
#+begin_src emacs-lisp
  (defun yank-remote-and-msg ()
    (interactive)
    (message (bar-to-clipboard)))

  (use-package browse-at-remote
    :bind (("C-x M-e" . browse-at-remote)
           ("C-x M-r" . yank-remote-and-msg)))
#+end_src
** fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :hook ((before-save . fish_indent-before-save)))
#+END_SRC

** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-x x" . er/expand-region)))
#+END_SRC
** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :bind (("C-x G" . git-timemachine)))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-z RET" . magit-status)
           ("C-z m" . magit-status)))
#+END_SRC
** paredit
   #+begin_src emacs-lisp
     (use-package paredit
       :diminish ""
       :bind (("C-M-c" . paredit-comment-dwim))
       :commands (enable-paredit-mode))
   #+end_src
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook (after-init . yas-global-mode))
#+END_SRC
** yaml
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indentation)
  (use-package smart-shift)
  (use-package yaml-mode
    :custom
    (yaml-indent-offset 2)
    :hook ((yaml-mode . highlight-indentation-mode)
           (yaml-mode . smart-shift-mode)))
#+END_SRC

** restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient)
#+END_SRC
** COMMENT mu4e
#+BEGIN_SRC emacs-lisp
  ;; Installed mu via nixos; it automatically adds it to load path.
  ;; But still need to require it manually.
  (require 'mu4e)

  (setq mu4e-maildir-shortcuts
        '((:maildir "/sent"             :key  ?s)
          (:maildir "/Gmail/INBOX"      :key  ?z)
          (:maildir "/Pitch/INBOX"      :key  ?p)))

  (setq mu4e-pitch-signature
        (format "<#part type=text/html><html><body><p>%s</p></body></html><#/part>"
                (with-temp-buffer
                  (insert-file-contents "~/.emacs.d/pitch-signature.html")
                  (buffer-string))))

  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "Zarkonesmall"
             :enter-func (lambda () (mu4e-message "Entering Zarkonesmall context"))
             :match-func
             (lambda (msg)
               (when msg
                 (string-match-p "^/Gmail" (mu4e-message-field msg :maildir))))

             :vars '((user-mail-address . "zarkonesmall@gmail.com")
                     (smtpmail-smtp-user . "zarkonesmall@gmail.com")
                     (user-full-name . "Anatolii Smolianinov")
                     (mu4e-compose-signature . "Anatolii Smolianinov")))
           ,(make-mu4e-context
             :name "Pitch"
             :enter-func (lambda () (mu4e-message "Switch to the Pitch context"))
             ;; no leave-func
             ;; we match based on the maildir of the message
             ;; this matches maildir /Arkham and its sub-directories
             :match-func (lambda (msg)
                           (when msg
                             (string-match-p "^/Pitch" (mu4e-message-field msg :maildir))))
             :vars `((user-mail-address . "anatolii@pitch.io")
                     (smtpmail-smtp-user . "anatolii@pitch.io")
                     (user-full-name . "Anatolii Smolianinov")
                     ;; TODO: html signature  https://dataswamp.org/~solene/2016-06-07-13.html
                     (mu4e-compose-signature . ,mu4e-pitch-signature)
                     ))))

  ;; start with the first (default) context;
  ;; default is to ask-if-none (ask when there's no context yet, and none match)
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-bookmarks
        (add-to-list 'mu4e-bookmarks
                     '(:name  "Flagged messages"
                       :query "flag:flagged"
                       :key ?f)))
  (setq mu4e-bookmarks
        (add-to-list 'mu4e-bookmarks
                     '(:name  "Pitch Github Last Week"
                       :query "list:pitch-app.pitch-io.github.com and date:7d..now"
                       :key ?g)))

  (use-package mu4e
    :ensure nil
    :custom
    (mu4e-hide-index-messages t)
    (mu4e-update-interval nil)
    (message-kill-buffer-on-exit t)
    (message-send-mail-function 'smtpmail-send-it)
    (smtpmail-default-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-service 587)
    (smtpmail-stream-type 'starttls)
    (mail-user-agent 'mu4e-user-agent)
    :bind (("C-x M-u" . mu4e)
           ("C-c C-a" . mu4e-view-attachment-action)))

  (defun mu4e-attach-marked-files (buffer)
    "Attach all marked files to BUFFER"
    (interactive "BAttach to buffer: ")
    (let ((files (dired-get-marked-files)))
      (with-current-buffer (get-buffer buffer)
        (dolist (file files)
          (if (file-regular-p file)
              (mml-attach-file file
                               (mm-default-file-encoding file)
                               nil "attachment")
            (message "skipping non-regular file %s" file)))))
    (switch-to-buffer buffer))
#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq-default markdown-open-command "multimarkdown"))
#+END_SRC

** direnv
#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :bind (("C-z M-d" . direnv-allow))
    :custom
    (direnv-always-show-summary t)
    :config
    (direnv-mode))

#+END_SRC

* Prog modes
** eglot
#+begin_src emacs-lisp
  (use-package consult-eglot)
  (use-package eglot
    :bind (("C-c M-i" . eglot-code-action-organize-imports)
           ("C-c M-/" . eglot-find-implementation))
    :init
    (with-eval-after-load 'eglot
      (setq completion-category-defaults nil)
      (setq-default eglot-workspace-configuration
                    '((:gopls .
                              ((staticcheck . t)
                               (matcher . "CaseSensitive")))))))



#+end_src

** Go
   #+begin_src emacs-lisp
     (defun my-gofmt-before-save ()
       "Add this to .emacs to run gofmt on the current buffer when saving:
     \(add-hook 'before-save-hook 'gofmt-before-save).

     Note that this will cause ‘go-mode’ to get loaded the first time
     you save any file, kind of defeating the point of autoloading."

       (interactive)
       (when (or (eq major-mode 'go-mode)
                 (eq major-mode 'go-mode)) (gofmt)))

     (use-package templ-ts-mode)

     (defun remove-window-margins ()
       (set-window-margins nil nil nil))



     (use-package go-mode
       :hook ((go-mode . eglot-ensure)
              (go-mode . flycheck-mode)
              (go-mode . eldoc-mode)
              (go-mode . eglot-ensure)
              (go-mode . flycheck-mode)
              (go-mode . eldoc-mode)
              (go-mode . remove-window-margins)
              (before-save . my-gofmt-before-save))
       :bind (("C-c a" . eglot-code-actions)
              ("C-c C-c" . eglot-code-action-quickfix)
              ("C-c C-e" . eglot-code-action-extract)
              ("M-t" . go-test-current-test))
       :custom
       (tab-width 4)
       (go-mode-indent-offset 4)
       ;;(company-lsp-async t)
       ;;(go-coverage-display-buffer-func 'display-buffer-same-window)
       (gofmt-command "goimports")
       (compile-command "go build -v")

       :config
       (use-package go-snippets)
       ;; (setenv "GO111MODULE" "on")
       ;; (lsp-register-custom-settings
       ;;  '(("gopls.completeUnimported" t t)
       ;;    ("gopls.staticcheck" t t)))
       )

     (use-package gotest
       :ensure t)

     (use-package dape
       :preface
       ;; By default dape shares the same keybinding prefix as `gud'
       ;; If you do not want to use any prefix, set it to nil.
       (setq dape-key-prefix "\C-d")

       ;; :hook
       ;; Save breakpoints on quit
       ;; (kill-emacs . dape-breakpoint-save)
       ;; Load breakpoints on startup
       ;; (after-init . dape-breakpoint-load)

       :config
       ;; Turn on global bindings for setting breakpoints with mouse
       ;; (dape-breakpoint-global-mode)

       ;; Info buffers to the right
       ;; (setq dape-buffer-window-arrangement 'right)

       ;; Info buffers like gud (gdb-mi)
       ;; (setq dape-buffer-window-arrangement 'gud)
       ;; (setq dape-info-hide-mode-line nil)

       ;; Pulse source line (performance hit)
       (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)

       ;; Showing inlay hints
       (setq dape-inlay-hints t)

       ;; Save buffers on startup, useful for interpreted languages
       ;; (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))

       ;; Kill compile buffer on build success
       (add-hook 'dape-compile-hook 'kill-buffer)

       )

     ;; Enable repeat mode for more ergonomic `dape' use
     (use-package repeat
       :config
       (repeat-mode))
   #+end_src

** Rust
#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)

  (defun rust--compile-color-hook ()
    "Used to interpret cargo's colored output"
    (ansi-color-apply-on-region compilation-filter-start (point)))

  ;; This cannot be done in a buffer-local variable since the hook must be set
  ;; in the compilation buffer.
  (defadvice compilation-start (around add-ansi-color-hook activate)
    (if (eq major-mode 'rust-mode)
        (let ((compilation-start-hook (cons
                                       (lambda (proc) (add-hook 'compilation-filter-hook
                                                                'rust--compile-color-hook
                                                                nil t))
                                       compilation-start-hook)))
          ad-do-it)
      ad-do-it))


  (use-package cargo)
  (use-package flycheck-rust)


  (use-package rust-mode
    :hook ((flycheck-mode . flycheck-rust-setup)
           (rust-mode . eglot-ensure)
           (rust-mode . cargo-minor-mode)
           (rust-mode . flycheck-mode))
    :custom
    (indent-tabs-mode nil)
    (rust-format-on-save t)
    :bind (:map rust-mode-map
                ("C-c C-m" . rust-run)
                ("C-c C-d" . eldoc-doc-buffer)
                ("C-c C-e" . flycheck-next-error)
                ("C-c C-t" . rust-test)))
#+END_SRC
** Clojure
   #+begin_src emacs-lisp
     (defun cider-save-and-compile-and-load-file ()
       "Save file, then compile and load it"
       (interactive)
       (save-buffer)
       (call-interactively 'cider-load-buffer))

     ;; (use-package rainbow-mode)
     (defun cider-jack-in-dev-alias ()
       (interactive)
       (let ((cider-jack-in-cmd "clj -A:dev"))
         (cider-jack-in- '())))

     (defun zarkone/cider-refresh-all ()
       (interactive)
       (let* ((form "(user/restart-all)")
              (override cider-interactive-eval-override)
              (ns-form (if (cider-ns-form-p form) "" (format "(ns %s)" (cider-current-ns)))))
         (with-current-buffer (get-buffer-create cider-read-eval-buffer)
           (erase-buffer)
           (clojure-mode)
           (unless (string= "" ns-form)
             (insert ns-form "\n\n"))
           (insert form)
           (let ((cider-interactive-eval-override override))
             (cider-interactive-eval form
                                     nil
                                     nil
                                     (cider--nrepl-pr-request-map))))))

     (use-package cider
       :commands (cider-mode)
       :hook ((cider-mode . eldoc-mode))
       :config
       (setq cider-known-endpoints '(("pitch-app/desktop-app" "localhost" "7888")))
       (setq cider-clojure-clj-aliases ":dev")

       :bind (:map cider-mode-map
                   ("C-c C-n" . zarkone/cider-refresh-all)
                   ("C-c C-k" . cider-save-and-compile-and-load-file)
                   ("C-c C-i" . cider-interrupt)
                   :map cider-repl-mode-map
                   ("C-c C-l" . cider-repl-clear-buffer)))

     (use-package flycheck-clj-kondo)

     (use-package clj-refactor
       :diminish ""
       :commands (clj-refactor-mode)
       :config
       (cljr-add-keybindings-with-prefix "C-c C-j"))

     (use-package clojure-mode

       :hook (
              ;; requires clojure-lsp
              ;; (clojure-mode . lsp)
              (clojure-mode . cider-mode)
              ;; (clojure-mode . rainbow-delimiters-mode)
              (clojure-mode . enable-paredit-mode)
              (clojure-mode . flycheck-mode)
              (clojure-mode . clj-refactor-mode))
       :config
       (require 'flycheck-clj-kondo))
   #+end_src
** Svelte
#+begin_src elisp
  (use-package svelte-mode
    :bind (:map svelte-mode-map
                ("M-o" . other-window)))
#+end_src
** ts
#+begin_src emacs-lisp
  (use-package tide)
  (use-package typescript-mode
    :custom
    (typescript-mode)
    (typescript-indent-level 4)
    (typescript-mode-indent-offset 4)
    (js-indent-level 4)
    (flycheck-check-syntax-automatically '(save mode-enabled))
    :hook ((typescript-mode . typescript-mode)
           (typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (typescript-mode . indent-tabs-mode)
           (typescript-mode . flycheck-mode)
           ;; (before-save . tide-format-before-save)
           ))
#+end_src
** COMMENT js
   looks :ensure nil doesn't work, use-package still tries to fetch
   this one. didn't figure why yet.
#+begin_src emacs-lisp
     (use-package js-mode
       :custom
       (js-indent-level 2)
       :ensure nil)
#+end_src

** haskell
  #+begin_src emacs-lisp
    (use-package haskell-mode)
  #+end_src

** guile scheme
#+begin_src emacs-lisp
  (use-package geiser-guile)
  (use-package geiser
    :hook (scheme-mode . enable-paredit-mode))

#+end_src

* misc
** protobuf3
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :hook (protobuf-mode . protobuf-mode))
  (use-package protobuf-mode
    :custom (protobuf-mode-indent-offset 4))
#+end_src
* AI
** COMMENT minuet
#+begin_src emacs-lisp
  (use-package minuet
    :bind
    (("M-l" . #'minuet-complete-with-minibuffer) ;; use minibuffer for completion
     ("M-i" . #'minuet-show-suggestion) ;; use overlay for completion
     ("C-c m" . #'minuet-configure-provider)
     :map minuet-active-mode-map
     ;; These keymaps activate only when a minuet suggestion is displayed in the current buffer
     ("M-p" . #'minuet-previous-suggestion) ;; invoke completion or cycle to next completion
     ("M-n" . #'minuet-next-suggestion) ;; invoke completion or cycle to previous completion
     ("M-A" . #'minuet-accept-suggestion) ;; accept whole completion
     ;; Accept the first line of completion, or N lines with a numeric-prefix:
     ;; e.g. C-u 2 M-a will accepts 2 lines of completion.
     ("M-a" . #'minuet-accept-suggestion-line)
     ("M-e" . #'minuet-dismiss-suggestion))

    :init
    ;; if you want to enable auto suggestion.
    ;; Note that you can manually invoke completions without enable minuet-auto-suggestion-mode
    (add-hook 'prog-mode-hook #'minuet-auto-suggestion-mode)

    :config
    (setq minuet-provider 'codestral)
    (setq minuet-codestral-options
      '(:model "codestral-latest"
               :end-point "https://codestral.mistral.ai/v1/fim/completions"
               :api-key (lambda () "")
               :template (:prompt minuet--default-fim-prompt-function
                                  :suffix minuet--default-fim-suffix-function)
               :optional nil))
    (minuet-set-optional-options minuet-codestral-options :stop ["\n\n"])
    (minuet-set-optional-options minuet-codestral-options :max_tokens 256)


    )

  ;; gemini
  ;;   (setq minuet-provider 'gemini)
  ;;   (defvar minuet-gemini-options
  ;;     `(:model "gemini-2.0-flash"
  ;;              :api-key (lambda () "put key here")
  ;;              :system
  ;;              (:template minuet-default-system-template
  ;;                         :prompt minuet-default-prompt
  ;;                         :guidelines minuet-default-guidelines
  ;;                         :n-completions-template minuet-default-n-completion-template)
  ;;              :fewshots minuet-default-fewshots
  ;;              :chat-input
  ;;              (:template minuet-default-chat-input-template
  ;;                         :language-and-tab minuet--default-chat-input-language-and-tab-function
  ;;                         :context-before-cursor minuet--default-chat-input-before-cursor-function
  ;;                         :context-after-cursor minuet--default-chat-input-after-cursor-function)
  ;;              :optional nil)
  ;;     "config options for Minuet Gemini provider")
  ;;   (defvar mg-minuet-gemini-prompt
  ;;     "You are the backend of an AI-powered code completion engine. Your task is to
  ;; provide code suggestions based on the user's input. The user's code will be
  ;; enclosed in markers:

  ;; - `<contextAfterCursor>`: Code context after the cursor
  ;; - `<cursorPosition>`: Current cursor location
  ;; - `<contextBeforeCursor>`: Code context before the cursor
  ;; ")

  ;;   (defvar mg-minuet-gemini-chat-input-template
  ;;     "{{{:language-and-tab}}}
  ;; <contextBeforeCursor>
  ;; {{{:context-before-cursor}}}<cursorPosition>
  ;; <contextAfterCursor>
  ;; {{{:context-after-cursor}}}")

  ;;   (defvar mg-minuet-gemini-fewshots
  ;;     `((:role "user"
  ;;              :content "# language: python
  ;; <contextBeforeCursor>
  ;; def fibonacci(n):
  ;;     <cursorPosition>
  ;; <contextAfterCursor>

  ;; fib(5)")
  ;;       ,(cadr minuet-default-fewshots)))

  ;;   (minuet-set-optional-options minuet-gemini-options
  ;;                                :prompt 'mg-minuet-gemini-prompt
  ;;                                :system)
  ;;   (minuet-set-optional-options minuet-gemini-options
  ;;                                :template 'mg-minuet-gemini-chat-input-template
  ;;                                :chat-input)
  ;;   (plist-put minuet-gemini-options :fewshots 'mg-minuet-gemini-fewshots)

  ;;   (minuet-set-optional-options minuet-gemini-options
  ;;                                :generationConfig
  ;;                                '(:maxOutputTokens 256
  ;;                                                   :topP 0.9))
  ;;   (minuet-set-optional-options minuet-gemini-options
  ;;                                :safetySettings
  ;;                                [(:category "HARM_CATEGORY_DANGEROUS_CONTENT"
  ;;                                            :threshold "BLOCK_NONE")
  ;;                                 (:category "HARM_CATEGORY_HATE_SPEECH"
  ;;                                            :threshold "BLOCK_NONE")
  ;;                                 (:category "HARM_CATEGORY_HARASSMENT"
  ;;                                            :threshold "BLOCK_NONE")
  ;;                                 (:category "HARM_CATEGORY_SEXUALLY_EXPLICIT"
  ;;                                            :threshold "BLOCK_NONE")])





#+end_src
* emacs global conf

This has to be in the end of file for emacs 29, it turns out.
Otherwise getting a lot of nonsense like autoloads not created, file
not found etc while installing packages.

I was thinking that I've fixed file not file problem with replacing
:init to :config in certain cases (corfu, vertico, etc).

But now I've put it back and it went fine with deleted elpa,
eln-cache. Which probably means that "use-package emacs which needs
to be put in the end of file" solution wins.

#+begin_src emacs-lisp
  (defun delete-whitespace-if-not-ts-ts ()
    (interactive)
    (when (not (eq major-mode 'typescript-mode))
      (delete-trailing-whitespace)))

  (use-package emacs
    :hook ((before-save . delete-whitespace-if-not-ts-ts)
           (emacs-lisp-mode . enable-paredit-mode)
           (org-mode . auto-fill-mode)
           (org-mode . flyspell-mode)
           (org-mode . org-indent-mode))
    :custom
    (auto-save-default nil)
    (create-lockfiles nil)
    (auth-sources '((:source "~/.emacs.d/secrets/.authinfo.gpg")))
    (safe-local-variable-values '((url-max-redirections . 0)))
    (dired-listing-switches "-alGh")
    (indent-tabs-mode nil)
    (truncate-lines t)
    (word-wrap nil)
    (select-enable-clipboard t)
    (select-enable-primary nil)
    (uniquify-buffer-name-style 'forward)
    (save-interprogram-paste-before-kill t)
    (compilation-always-kill  t)
    (apropos-do-all t)
    (mouse-yank-at-point t)
    (save-place-file (concat user-emacs-directory ".places"))
    (backup-directory-alist `(("." . ,(concat user-emacs-directory ".backups"))))
    (warning-suppress-types '((comp)))
    (default-input-method 'russian-computer)
    (browse-url-firefox-program "firefox-beta")
    (browse-url-browser-function 'browse-url-firefox)
    (safe-local-variable-values '((eval define-clojure-indent
                                        (reg-cofx :defn)
                                        (reg-event-db :defn)
                                        (reg-event-fx :defn)
                                        (reg-fx :defn)
                                        (reg-sub :defn)
                                        (reg-event-domain :defn)
                                        (reg-block-event-fx :defn)
                                        (reg-event-domain-fx :defn)
                                        (this-as 0))
                                  (url-max-redirections . 0)) nil nil "Customized with use-package emacs")
    :config
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Pinentry mode for gpg
    (setq epa-pinentry-mode 'loopback)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    (show-paren-mode 1)
    (menu-bar-mode 0)
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)

    ;; workaround for gnupg 2.4.1 encryption
    ;; https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources
    (fset 'epg-wait-for-status 'ignore)

    ;; use wl-clipboard for copy-paste
    (wl-clipboard-init)
    :config
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'downcase-region 'disabled nil)

    :chords (("[]" . "[]\C-b")
             ("<>" . "<>\C-b")
             ("''" . "''\C-b")
             ("\"\"" . "\"\"\C-b")
             ("()" . "()\C-b")
             ("{}" . "{}\C-b"))

    :bind (("C-x M-5" . delete-other-windows-vertically)
           ("C-z 3" . vertical-three-windows-layout)
           ("C-z C-d" . delete-other-windows)
           ("C-z C-x" . split-window-below)
           ("C-z C-r" . split-window-right)
           ("C-z C-z" . maybe-suspend-frame)
           ("C-z C-n" . zarkone/switch-to-previous-buffer)
           ("C-_" . undo) ;; for term comp-ty
           ("C-w" . zarkone/kill-region-or-backward-kill-word)
           ("C-x C-d" . dired-jump)
           ("C-c M-o" . occur)
           ("<C-return>" . save-buffer)
           ("M-o" . other-window)
           ("C-x RET RET" . project-compile)
           ("M-RET" . recompile)
           ("M-;" . replace-regexp)
           ("C-x H" . help)
           ("C-c M-." . zarkone/insert-current-date)
           ("C-x C-g" . goto-address-at-point)
           ("M-/" . hippie-expand)
           ("M--" . zarkone/delete-whitespace)
           ("C-x C-k DEL" . zarkone/kill-till-end)
           ("C-M-y" . zarkone/duplicate-line)
           ("C-x M-w" . zarkone/filename-to-clipboard)
           ("C-s" . isearch-forward-regexp)
           ("C-r" . isearch-backward-regexp)
           ("C-x M-v" . visual-line-mode)
           ("C-<backspace>" . undo)

           :map prog-mode-map
           ("C-M-c" . zarkone/comment-or-uncomment-region-or-line)

           ))
#+end_src
