* Global functions and key bindings

** Custom Functions
#+BEGIN_SRC emacs-lisp
  (defun me/comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)
      (next-line)))

  (defun me/switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (defun me/kill-region-or-backward-kill-word (&optional arg region)
    "`kill-region' if the region is active, otherwise `backward-kill-word'"
    (interactive
     (list (prefix-numeric-value current-prefix-arg) (use-region-p)))
    (if region
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))
  (global-set-key (kbd "C-w") 'me/kill-region-or-backward-kill-word)

  (defun me/my-put-file-name-on-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (with-temp-buffer
          (insert filename)
          (clipboard-kill-region (point-min) (point-max)))
        (message filename))))

  (defun me/duplicate-line ()
    "Duplicate current line."
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))

  (defun me/kill-till-end ()
    "Deletes everything from point to end of file"
    (interactive)
    (delete-region
     (point)
     (point-max)))

  (defun delete-whitespace (&optional backward-only)
    "Delete all spaces, tabs and newlinesaround point.
  If BACKWARD-ONLY is non-nil, only delete them before point."
    (interactive "*P")
    (let ((orig-pos (point)))
      (delete-region
       (if backward-only
           orig-pos
         (progn
           (skip-chars-forward " \t\n")
           (constrain-to-field nil orig-pos t)))
       (progn
         (skip-chars-backward " \t\n")
         (constrain-to-field nil orig-pos)))))
#+END_SRC

** Custom KBD Macro
Removed all macroses to functions ATM; decided to leave =defkbdmacro= here for
future reference.
#+BEGIN_SRC emacs-lisp
  (defmacro defkbdmacro (name keyseq-string &optional docstring)
    `(fset (quote ,name)
           (lambda (&optional arg)
             ,docstring
             (interactive "p")
             (kmacro-exec-ring-item (quote (,keyseq-string 0 "%d")) arg))))
#+END_SRC
** Global vars, hooks and key bindings
#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :demand t
    :config (key-chord-mode 1))

  (use-package emacs
    :hook ((before-save . delete-trailing-whitespace)
           (emacs-lisp-mode . enable-paredit-mode))

    :chords (("[]" . "[]\C-b")
             ("<>" . "<>\C-b")
             ("''" . "''\C-b")
             ("\"\"" . "\"\"\C-b")
             ("()" . "()\C-b")
             ("{}" . "{}\C-b"))
    :init
    (show-paren-mode 1)
    (helm-mode t)

    :config
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (setq-default indent-tabs-mode nil
                  word-wrap nil
                  truncate-lines t)
    (setq x-select-enable-clipboard t
          x-select-enable-primary t
          browse-url-browser-function 'browse-url-chrome
          uniquify-buffer-name-style 'forward
          save-interprogram-paste-before-kill t
          compilation-always-kill  t
          apropos-do-all t
          mouse-yank-at-point t
          save-place-file (concat user-emacs-directory ".places")
          backup-directory-alist `(("." . ,(concat user-emacs-directory ".backups"))))

    (define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))

    :bind (("M-[" . other-window)
           ([remap text-scale-decrease] . undo)
           ("C--" . undo)
           ("C-x C-d" . dired-jump)
           ("<C-return>" . save-buffer)
           ("C-x RET RET" . compile)
           ("C-x M-m" . recompile)
           ("C-M-;" . replace-regexp)
           ("C-x H" . help)
           ("C-c M-." . insdate-insert-current-date)
           ("C-x C-g" . goto-address-at-point)
           ("M-/" . hippie-expand)
           ("M-\\" . delete-whitespace)
           ("C-x C-k DEL" . me/kill-till-end)
           ("C-M-y" . me/duplicate-line)
           ("C-x M-w" . me/my-put-file-name-on-clipboard)
           ("C-s" . isearch-forward-regexp)
           ("C-r" . isearch-backward-regexp)
           ("s-k" . windmove-up)
           ("s-j" . windmove-down)
           ("s-h" . windmove-left)
           ("s-l" . windmove-right)

           :map prog-mode-map
           ("C-;" . me/comment-or-uncomment-region-or-line)))
#+END_SRC
* Appearance
** Disable all GUI
#+BEGIN_SRC emacs-lisp
  (when window-system
    (menu-bar-mode 0)
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (tooltip-mode 0))

  (global-hl-line-mode 1)
  (blink-cursor-mode 1)

  (setq ring-bell-function 'ignore)
  (setq-default indicate-buffer-boundaries 'left)
  (use-package diminish)
#+END_SRC
** Color Theme
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (use-package eziam-dark-theme
    :ensure eziam-theme
    :init (load-theme 'eziam-dark t)
    :config
    (set-face-background 'default "black")
    (set-face-background 'fringe (face-attribute 'default :background))
    ;; TODO: system-install font
    (set-face-attribute 'default nil :height 105 :font "Hack")
    (setq-default inhibit-x-resources t))
#+END_SRC
* Packages
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish ""
    :hook (after-init . global-company-mode)
    :config
    (push 'company-elisp company-backends)
    (global-company-mode 1))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-x x" . er/expand-region)))
#+END_SRC
** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :bind (("C-x G" . git-timemachine)))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
    (use-package helm
      :diminish ""
      :commands (helm helm-mode)
      :bind (("C-x b" . helm-mini)
             ("C-x C-f" . helm-find-files)
             ("M-x" . helm-M-x)
             ("M-y" . helm-show-kill-ring)
             ("C-M-h" . me/kill-region-or-backward-kill-word)
             ("C-c M-o" . helm-occur)
             ("C-x C-r" . helm-recentf)
             :map helm-map
             ("C-i" . helm-execute-persistent-action))
      :config
      (setq helm-buffers-fuzzy-matching t
            helm-recentf-fuzzy-match t
            helm-M-x-fuzzy-match t))
#+END_SRC
*** helm plugins
#+BEGIN_SRC emacs-lisp
  (use-package helm-company)
  (use-package helm-rg
    :bind (("C-x C-p" . helm-projectile-rg)))
  (use-package helm-projectile
    :bind (("C-x C-b" . helm-projectile-switch-to-buffer)))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-M-g" . magit-status)))
#+END_SRC
** paredit
   #+begin_src emacs-lisp
     (use-package paredit
       :commands (enable-paredit-mode))
   #+end_src
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish ""
    :demand t
    :after (helm)
    :hook (after-init . projectile-global-mode)
    :bind-keymap (("C-c C-p" . projectile-command-map))
    :custom (projectile-completion-system 'helm)
    :config
    (setq-default projectile-mode-line " P"))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook (after-init . yas-global-mode))
#+END_SRC
