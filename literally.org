* Global functions and key bindings

** behavior
Some defaults and glo
#+BEGIN_SRC emacs-lisp
(setq-default word-wrap nil)
(setq-default truncate-lines t)
(setq browse-url-browser-function 'browse-url-chrome)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'downcase-region 'disabled nil)

#+END_SRC
** My Functions
#+BEGIN_SRC emacs-lisp
(defun me/comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
    (comment-or-uncomment-region beg end)
    (next-line)))
(define-key prog-mode-map (kbd "C-;") 'me/comment-or-uncomment-region-or-line)

(defun me/switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
(global-set-key (kbd "<C-tab>") 'me/switch-to-previous-buffer)

(defun me/kill-region-or-backward-kill-word (&optional arg region)
  "`kill-region' if the region is active, otherwise `backward-kill-word'"
  (interactive
   (list (prefix-numeric-value current-prefix-arg) (use-region-p)))
  (if region
      (kill-region (region-beginning) (region-end))
    (backward-kill-word arg)))
(global-set-key (kbd "C-w") 'me/kill-region-or-backward-kill-word)

(defun me/my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
(global-set-key (kbd "C-x M-w") 'me/my-put-file-name-on-clipboard)
#+END_SRC
** My KBD Macro
#+BEGIN_SRC emacs-lisp
  (defmacro defkbdmacro (name keyseq-string &optional docstring)
    `(fset (quote ,name)
           (lambda (&optional arg)
             ,docstring
            (interactive "p")
            (kmacro-exec-ring-item (quote (,keyseq-string 0 "%d"))
                                   arg))))

  (defkbdmacro kill-till-end [67108896 134217790 23] "Remove text till EOF.")
  (defkbdmacro dired-open-this-dir "d" "Open Dired here.")
  (defkbdmacro dupstr "
  " "Duplicate string.")
#+END_SRC
** Global key bindings
#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))

  (global-set-key (kbd "M-[") 'other-window)
  (global-set-key [remap text-scale-decrease] 'undo)
  (global-set-key (kbd "C--") 'undo)
  (global-set-key (kbd "<C-return>") 'save-buffer)
  (global-set-key (kbd "C-x RET RET") 'compile)
  (global-set-key (kbd "C-M-;") 'replace-regexp)
  (global-set-key (kbd "C-x H") 'help)
  (global-set-key (kbd "C-c M-.") 'insdate-insert-current-date)
  (global-set-key (kbd "C-x C-g") 'goto-address-at-point)
  (global-set-key (kbd "s-k") 'windmove-up)
  (global-set-key (kbd "s-j") 'windmove-down)
  (global-set-key (kbd "s-h") 'windmove-left)
  (global-set-key (kbd "s-l") 'windmove-right)

#+END_SRC
** Better defaults
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        uniquify-buffer-name-style 'forward
        save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        save-place-file (concat user-emacs-directory ".places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory ".backups"))))
#+END_SRC
* Packages
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-M-g" . magit-status)))
#+END_SRC
** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :bind (("C-x G" . git-timemachine)))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :bind-keymap ("C-i" . helm-execute-persistent-action)
    :bind (("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-M-h" . kill-region-or-backward-kill-word)
           ("C-c M-o" . helm-occur)
           ("C-x C-r" . helm-recentf)
           )
    :config
    (helm-mode t)
    (setq helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-M-x-fuzzy-match t))
#+END_SRC
*** helm plugins
#+BEGIN_SRC emacs-lisp
  (use-package helm-company)
  (use-package helm-rg
    :bind (("C-x C-p" . helm-projectile-rg)))
  (use-package helm-projectile
    :bind (("C-x C-b" . helm-projectile-switch-to-buffer)))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-x x" . er/expand-region)))
#+END_SRC
** buffer-move
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :bind (("C-s-k" . buf-move-up)
           ("C-s-j" . buf-move-down)
           ("C-s-h" . buf-move-left)
           ("C-s-l" . buf-move-right)))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook (after-init . yas-global-mode))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :hook (after-init . projectile-global-mode)
    :bind-keymap (("C-c C-p" . projectile-command-map))
    :custom (projectile-completion-system 'helm)
    :config
    (setq-default projectile-mode-line " P"))
#+END_SRC
