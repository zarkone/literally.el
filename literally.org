* Global functions and key bindings

** Custom Functions
#+BEGIN_SRC emacs-lisp

  (defun font-names-list ()
    "Get list of names of installed fonts,which can be used to set font."
    (seq-filter (lambda (font)
                  (when-let ((info (font-info font)))
                    (string-match-p "spacing=100" (aref info 1))))
                (font-family-list)))

  (defun vertical-three-windows-layout ()
    "Vertical, three window layout"
    (interactive)
    (delete-other-windows)
    (split-window-horizontally)
    (split-window-horizontally)
    (balance-windows))

  (defun run-static-server (&optional on-random-port)
    "Run static server in current dir, with default port (8000).
  With prefix arg, run at random free port"
    (interactive "P")
    (let ((shell-command "python -m SimpleHTTPServer"))
      (async-shell-command
       (concat shell-command
               (when on-random-port
                 " 0")))))

  (defun emacs-reload ()
    "reloads emacs config"
    (interactive)
    (org-babel-load-file (expand-file-name "literally.org" user-emacs-directory)))

  (defun me/comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)
      (next-line)))

  (defun me/switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (defun me/kill-region-or-backward-kill-word (&optional arg region)
    "`kill-region' if the region is active, otherwise `backward-kill-word'"
    (interactive
     (list (prefix-numeric-value current-prefix-arg) (use-region-p)))
    (if region
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))
  (global-set-key (kbd "C-w") 'me/kill-region-or-backward-kill-word)

  (defun me/my-put-file-name-on-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (with-temp-buffer
          (insert filename)
          (clipboard-kill-region (point-min) (point-max)))
        (message filename))))

  (defun me/duplicate-line ()
    "Duplicate current line."
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))

  (defun me/kill-till-end ()
    "Deletes everything from point to end of file"
    (interactive)
    (delete-region
     (point)
     (point-max)))

  (defun delete-whitespace (&optional backward-only)
    "Delete all spaces, tabs and newlinesaround point.
  If BACKWARD-ONLY is non-nil, only delete them before point."
    (interactive "*P")
    (let ((orig-pos (point)))
      (delete-region
       (if backward-only
           orig-pos
         (progn
           (skip-chars-forward " \t\n")
           (constrain-to-field nil orig-pos t)))
       (progn
         (skip-chars-backward " \t\n")
         (constrain-to-field nil orig-pos)))))
#+END_SRC

** Custom KBD Macro
Removed all macroses to functions ATM; decided to leave =defkbdmacro= here for
future reference.
#+BEGIN_SRC emacs-lisp
  (defmacro defkbdmacro (name keyseq-string &optional docstring)
    `(fset (quote ,name)
           (lambda (&optional arg)
             ,docstring
             (interactive "p")
             (kmacro-exec-ring-item (quote (,keyseq-string 0 "%d")) arg))))
#+END_SRC
** Global vars, hooks and key bindings
#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :demand t
    :config (key-chord-mode 1))

  (defun gui-tweaks ()
    (interactive)
    (when menu-bar-mode
      (menu-bar-mode 0)
      (scroll-bar-mode 0)
      (tool-bar-mode 0)
      (tooltip-mode 0))
    (set-face-attribute 'cursor nil :background "#d1d")
    (set-face-attribute 'fringe nil :foreground "green")
    (set-face-attribute 'vertical-border nil :foreground "#212")
    (set-face-attribute 'default nil :height 100 :font "JetBrains Mono")
    (set-face-attribute 'region nil :background "#757")
    (set-face-attribute 'hl-line nil :background "#212")

    (set-face-attribute 'mode-line nil
                        :background "#212"
                        :foreground "green"
                        :box '(:line-width 1 :color "#212"))
    (set-face-attribute 'mode-line-inactive nil
                        :background "#212"
                        :foreground "purple"
                        :box '(:line-width 1 :color "#212"))
    )

  (use-package emacs
    :hook ((before-save . delete-trailing-whitespace)
           (emacs-lisp-mode . enable-paredit-mode)
           (org-mode . auto-fill-mode)
           (org-mode . flyspell-mode)
           (after-make-frame . gui-tweaks)
           )
    :chords (("k[" . delete-whitespace)
             ("i0" . me/switch-to-previous-buffer)
             ("[]" . "[]\C-b")
             ("<>" . "<>\C-b")
             ("''" . "''\C-b")
             ("\"\"" . "\"\"\C-b")
             ("()" . "()\C-b")
             ("{}" . "{}\C-b"))
    :custom
    (auth-sources '((:source "/home/zarkone/.emacs.d/secrets/.authinfo.gpg")))
    (safe-local-variable-values '((url-max-redirections . 0)))
    (dired-listing-switches "-alGh")
    (indent-tabs-mode nil)
    (truncate-lines t)
    (word-wrap nil)
    (x-select-enable-clipboard t)
    (x-select-enable-primary t)
    (uniquify-buffer-name-style 'forward)
    (save-interprogram-paste-before-kill t)
    (compilation-always-kill  t)
    (apropos-do-all t)
    (mouse-yank-at-point t)
    (save-place-file (concat user-emacs-directory ".places"))
    (backup-directory-alist `(("." . ,(concat user-emacs-directory ".backups"))))
    (default-input-method 'russian-computer)
    :init
    (show-paren-mode 1)

    (setq-default browse-url-browser-function
                  (cl-case system-type
                    ((darwin macos) 'browse-url-default-macosx-browser)
                    (t 'browse-url-firefox)))

    :config
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (global-unset-key (kbd "M-ESC ESC"))
    (define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))
    (gui-tweaks)
    :bind (("M-[" . other-window)
           ([remap text-scale-decrease] . undo)
           ("C-x M-5" . delete-other-windows-vertically)
           ("C-x M-3" . vertical-three-windows-layout)
           ("C--" . undo)
           ("C-x M-s" . run-static-server)
           ("C-x C-d" . dired-jump)
           ("M-o" . occur)
           ("<C-return>" . save-buffer)
           ("C-x o" . me/switch-to-previous-buffer)
           ("C-x RET RET" . compile)
           ("C-x M-m" . recompile)
           ("C-M-;" . replace-regexp)
           ("C-x H" . help)
           ("C-c M-." . insdate-insert-current-date)
           ("C-x C-g" . goto-address-at-point)
           ("M-/" . hippie-expand)
           ("M-\\" . delete-whitespace)
           ("C-x C-k DEL" . me/kill-till-end)
           ("C-M-y" . me/duplicate-line)
           ("C-x M-w" . me/my-put-file-name-on-clipboard)
           ("C-s" . isearch-forward-regexp)
           ("C-r" . isearch-backward-regexp)
           ("C-x M-v" . visual-line-mode)
           ("C-c p" . windmove-up)
           ("C-c n" . windmove-down)
           ("C-c b" . windmove-left)
           ("C-c f" . windmove-right)

           :map prog-mode-map
           ("C-;" . me/comment-or-uncomment-region-or-line)))
#+END_SRC
* Appearance
** OSX
   #+begin_src emacs-lisp
     (use-package osx-pseudo-daemon
       :custom
       (osx-pseudo-daemon-mode 1)
       (mac-option-modifier 'super)
       (mac-command-modifier 'meta))

     (use-package exec-path-from-shell
       :init
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize)))

   #+end_src
** Disable all GUI
#+BEGIN_SRC emacs-lisp
  (when window-system
    (menu-bar-mode 0)
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (tooltip-mode 0))

  (global-hl-line-mode 1)
  (blink-cursor-mode 1)

  (setq ring-bell-function 'ignore)
  (setq-default indicate-buffer-boundaries 'left)
  (use-package diminish)
#+END_SRC
** Highlight git changes in fringes
   #+begin_src emacs-lisp
     (use-package diff-hl
       :hook (after-init . global-diff-hl-mode))
   #+end_src
** Color Theme
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)

  (use-package fira-code-mode
    :hook prog-mode)

  (use-package modus-vivendi-theme
    :custom
    (inhibit-x-resources t)

    :init (load-theme 'modus-vivendi t)
    :config
    (gui-tweaks)
    ;; (global-fira-code-mode t)
    ;; (set-face-attribute 'default nil :height 105 :font "Ubuntu Mono")
    ;; (set-face-attribute 'default nil :height 95 :font "Fira Code")
    )
#+END_SRC
* Packages
** langtool
   #+begin_src emacs-lisp
     (use-package langtool
       :custom
       (langtool-language-tool-server-jar "/home/zarkone/Downloads/LanguageTool-5.1/languagetool-server.jar"))
   #+end_src
** nix
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode)
#+END_SRC

** browse-at-remote
#+begin_src emacs-lisp
  (defun yank-remote-and-msg ()
    (interactive)
    (message (bar-to-clipboard)))

  (use-package browse-at-remote
    :bind (("C-x M-e" . browse-at-remote)
           ("C-x M-r" . yank-remote-and-msg)))
#+end_src
** fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :hook ((before-save . fish_indent-before-save)))
#+END_SRC

** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish ""
    :init
    (global-company-mode +1)
    :config
    (push 'company-elisp company-backends))
#+END_SRC
** dockerfile
   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :init (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
   #+end_src
** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-x x" . er/expand-region)))
#+END_SRC
** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :bind (("C-x G" . git-timemachine)))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish ""
    :commands helm
    :hook (after-init . helm-mode)
    :custom
    (helm-buffers-fuzzy-matching t)
    (helm-recentf-fuzzy-match t)
    (helm-M-x-fuzzy-match t)
    :bind (("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-M-h" . me/kill-region-or-backward-kill-word)
           ("C-c M-o" . helm-occur)
           ("C-x C-r" . helm-recentf)
           :map helm-map
           ("C-i" . helm-execute-persistent-action)))
#+END_SRC
*** TODO helm-cd-path
    implement (or find) helm autocomplete for dirs from ~$CDPATH~
*** helm plugins
#+BEGIN_SRC emacs-lisp
  (use-package helm-company)
  (use-package helm-rg
    :bind (("C-x C-p" . helm-projectile-rg)
           ("C-x DEL" . helm-projectile))
    :custom
    (helm-projectile-set-input-automatically nil))
  (use-package helm-projectile
    :bind (("C-x C-b" . helm-projectile-switch-to-buffer)))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-M-g" . magit-status)
           ("C-x M-g" . magit-blame)))
#+END_SRC
** paredit
   #+begin_src emacs-lisp
     (use-package paredit
       :diminish ""
       :commands (enable-paredit-mode))
   #+end_src
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish ""
    :demand t
    :after (helm)
    :hook (after-init . projectile-global-mode)
    :bind-keymap (("C-c C-p" . projectile-command-map))
    :custom
    (projectile-completion-system 'helm)
    (projectile-mode-line " P"))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook (after-init . yas-global-mode))
#+END_SRC
** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :custom
    (indent-tabs-mode nil)
    (web-mode-markup-indent-offset 2)
    (web-mode-js-indent-offset 2)
    (web-mode-script-padding 0)
    (web-mode-code-indent-offset 2)
    (web-mode-sc)
    :init
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode)))
#+END_SRC

** restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient)
#+END_SRC
** mu4e
#+BEGIN_SRC emacs-lisp
  ;; Installed mu via nixos; it automatically adds it to load path.
  ;; But still need to require it manually.
  (require 'mu4e)
  (setq mu4e-xapix-signature
        (format "<#part type=text/html><html><body><p>%s</p></body></html><#/part>"
                (with-temp-buffer
                  (insert-file-contents "~/.emacs.d/xapix-signature.html")
                  (buffer-string))))

  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "Private"
             :enter-func (lambda () (mu4e-message "Entering Private context"))
             :match-func
             (lambda (msg)
               (when msg
                 (string-match-p "^/Gmail" (mu4e-message-field msg :maildir))))

             :vars '((user-mail-address . "zarkonesmall@gmail.com")
                     (smtpmail-smtp-user . "zarkonesmall@gmail.com")
                     (user-full-name . "Anatolii Smolianinov")
                     (mu4e-compose-signature . "Anatolii Smolianinov")))
           ,(make-mu4e-context
             :name "Xapix"
             :enter-func (lambda () (mu4e-message "Switch to the Xapix context"))
             ;; no leave-func
             ;; we match based on the maildir of the message
             ;; this matches maildir /Arkham and its sub-directories
             :match-func (lambda (msg)
                           (when msg
                             (string-match-p "^/Xapix" (mu4e-message-field msg :maildir))))
             :vars `((user-mail-address . "anatoly@xapix.io")
                     (smtpmail-smtp-user . "anatoly@xapix.io")
                     (user-full-name . "Anatolii Smolianinov")
                     ;; TODO: xapix sign https://dataswamp.org/~solene/2016-06-07-13.html
                     (mu4e-compose-signature . ,mu4e-xapix-signature

                                             )))
           ))

  ;; start with the first (default) context;
  ;; default is to ask-if-none (ask when there's no context yet, and none match)
  (setq mu4e-context-policy 'pick-first)

  (use-package mu4e-alert
    :ensure t
    :custom
    (mu4e-alert-style 'notifications)
    :hook
    ((after-init . mu4e-alert-enable-notifications)
     (after-init . mu4e-alert-enable-mode-line-display)))

  (use-package my-fake-mu4e
    :ensure nil
    :custom
    (mu4e-hide-index-messages t)
    (mu4e-update-interval nil)
    (message-kill-buffer-on-exit t)
    (message-send-mail-function 'smtpmail-send-it)
    (smtpmail-default-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-service 587)
    (smtpmail-stream-type 'starttls)
    (mail-user-agent 'mu4e-user-agent)
    :bind (("C-x M-u" . mu4e)))
#+END_SRC
** telega
#+BEGIN_SRC emacs-lisp
  (use-package telega
    :bind (("C-x M-t" . telega))
    :config
    (telega-notifications-mode t)
    (telega-mode-line-mode t))
#+END_SRC

** buf-move
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :bind (("C-s-k" . buf-move-up)
           ("C-s-j" . buf-move-down)
           ("C-s-h" . buf-move-left)
           ("C-s-l" . buf-move-right)))
#+END_SRC

* Prog modes
** lsp
   #+begin_src emacs-lisp
     (use-package company-lsp
       :config
       (push 'company-lsp company-backends))
     (use-package lsp-ui)
     (use-package lsp-mode
       :hook ((lsp-mode . lsp-ui-mode))
       :commands (lsp lsp-register-custom-settings lsp-deferred)
       ;; reformat code and add missing (or remove old) imports
       :custom
       (lsp-keymap-prefix "s-p")
       (lsp-prefer-flymake nil)
       (read-process-output-max 8092)
       (gc-cons-threshold 1800000)

       :init
       (add-hook 'lsp-mode-hook
                    ;; TODO: add macro or fn for `when find minor-mode ...`
                    #'(lambda ()
                        (when (member 'lsp-mode minor-mode-list)
                          (lsp-format-buffer)
                          (lsp-organize-imports))))

       :bind (("C-c d" . lsp-describe-thing-at-point)
              ("C-c e n" . flymake-goto-next-error)
              ("C-c e p" . flymake-goto-prev-error)
              ("C-c e r" . lsp-find-references)
              ("C-c e R" . lsp-rename)
              ("C-c e i" . lsp-find-implementation)
              ("C-c e t" . lsp-find-type-definition)))
   #+end_src
** Go
   #+begin_src emacs-lisp
     (use-package go-mode
       :hook ((go-mode . lsp)
              (before-save-hook . gofmt-before-save))
       :custom
       (company-lsp-async t)
       (go-coverage-display-buffer-func 'display-buffer-same-window)
       (gofmt-command "goimports")
       (compile-command "go build -v")

       :config
       (use-package go-snippets)
       (setenv "GO111MODULE" "on")
       (lsp-register-custom-settings
        '(("gopls.completeUnimported" t t)
          ("gopls.staticcheck" t t))))
   #+end_src
** Rust
#+BEGIN_SRC emacs-lisp
  (use-package cargo)
  (use-package flycheck-rust)
  (use-package rust-mode
    :hook ((flycheck-mode . flycheck-rust-setup)
           (rust-mode . lsp)
           (rust-mode . cargo-minor-mode)
           (rust-mode . flycheck-mode))
    :custom
    (indent-tabs-mode nil)
    (rust-format-on-save t)
    (compile-command "cargo build")
    :bind (:map rust-mode-map
                ;; ("C-c C-c" . rust-run)
                ;; ("C-c C-t" . rust-test)
                ("TAB" . company-indent-or-complete-common)))
#+END_SRC
** Clojure
   #+begin_src emacs-lisp
     (defun cider-save-and-compile-and-load-file ()
       "Save file, then compile and load it"
       (interactive)
       (save-buffer)
       (call-interactively 'cider-load-buffer))

     (use-package cider
       :commands (cider-mode)
       :hook ((cider-mode . eldoc-mode))
       ;; :custom
       ;; (cider-mode-line " cider")

       :bind (:map cider-mode-map
                   ("C-c C-k" . cider-save-and-compile-and-load-file)
                   ("C-c C-i" . cider-interrupt)))

     (use-package flycheck-clj-kondo)

     (use-package clj-refactor
       :commands (clj-refactor-mode)
       :config
       (cljr-add-keybindings-with-prefix "C-c C-j"))

     (use-package clojure-mode
       :hook ((clojure-mode . cider-mode)
              (clojure-mode . enable-paredit-mode)
              (clojure-mode . flycheck-mode)
              (clojure-mode . clj-refactor-mode))
       :config
       (require 'flycheck-clj-kondo))
   #+end_src
** ts
*** COMMENT with tide
#+begin_src emacs-lisp
  (use-package tide
    :ensure t
    :commands (tide-setup tide-hl-identifier-mode tide-format-before-save)
    :after (typescript-mode company flycheck)
    :custom
    (typescript-indent-level 2))

  (use-package typescript-mode
    :custom
    (flycheck-check-syntax-automatically '(save mode-enabled))
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . flycheck-mode)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+end_src

*** with lsp
#+begin_src emacs-lisp
  (use-package typescript-mode
    :custom
    (typescript-indent-level 2)
    (flycheck-check-syntax-automatically '(save mode-enabled))
    :hook ((typescript-mode . lsp)
           (before-save . lsp-format-buffer)
           (typescript-mode . flycheck-mode)))
#+end_src


** js
   #+begin_src emacs-lisp
     (use-package js-mode
       :custom
       (js-indent-level 2)
       :ensure nil)
   #+end_src

** ps
#+begin_src emacs-lisp
  (use-package purescript-mode)

  (defun pcs-enable ()
    (psc-ide-mode)
    (company-mode)
    (flycheck-mode)
    (turn-on-purescript-indentation))

  (use-package psc-ide
    :hook (purescript-mode . pcs-enable))
#+end_src

** Ruby
   #+begin_src emacs-lisp
     (use-package ruby-mode
       :hook ((ruby-mode . flymake-mode)))

     (use-package rvm
       :config
       (rvm-use-default))
   #+end_src

*** HAML
       #+begin_src emacs-lisp
         (use-package haml-mode
           :hook ((haml-mode . flycheck-mode)))
   #+end_src

*** inf-ruby
   #+begin_src emacs-lisp
     (use-package inf-ruby)
   #+end_src

*** SASS
   #+begin_src emacs-lisp
     (use-package sass-mode
       )
   #+end_src
** haskell
      #+begin_src emacs-lisp
        (use-package haskell-mode)

   #+end_src
(gui-tweaks)
